"""The data handling section of the code."""
from ibapi.client import EClient
from ibapi.ticktype import TickTypeEnum
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract

import threading
import time

import Constants


class IBapi(EWrapper, EClient):
    __last_ask = []
    __last_bid = []

    def __init__(self, lab_n):
        self.__lab_n = lab_n
        EClient.__init__(self, self)

    def tickPrice(self, reqId, tickType, price, attrib):
        """Web socket which returns the live prices of the Contact.symbol
        :param reqId: This will mostlikely be autogenerated
        :param tickType: ASK/BID 2 for ask 1 for BID
        :param price: Is the price of ASK/BID
        :param attrib: Other attributes"""
        if TickTypeEnum.to_str(tickType) == Constants.TICK_ASK:
            if len(self.__last_ask) <= self.__lab_n:
                self.__last_ask.append(price)
            print("Last Ask: {}".format(price))
        elif TickTypeEnum.to_str(tickType) == Constants.TICK_BID:
            if len(self.__last_bid) <= self.__lab_n:
                self.__last_bid.append(price)
            print("Last Bid: {}".format(price))


######################### Final App will have this pipeline
def run_loop():
    app.run()


app = IBapi(5)
app.connect('127.0.0.1', 7497, 123)
for tick in ["AAPL", "GOOGL"]:
    api_thread = threading.Thread(target=run_loop, daemon=True)
    api_thread.start()
    time.sleep(1)
    apple_contract = Contract()
    apple_contract.symbol = tick
    apple_contract.secType = 'STK'
    apple_contract.exchange = 'SMART'
    apple_contract.currency = 'USD'
    app.reqMarketDataType(3)
    print(tick)
    app.reqMktData(1, apple_contract, '', True, False, [])
    # This is where the model eval will take place
    # return = Model -> return (1 or 0), price
    # The risk evaluation service -> returns order details and stop loss details
    if "Market Closed.":
        app.disconnect()
#####################
